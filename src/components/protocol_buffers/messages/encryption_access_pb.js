// source: encryption_access.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var encryption_pb = require('./encryption_pb.js');
goog.object.extend(proto, encryption_pb);
goog.exportSymbol('proto.encryption_access.EncryptionAccess', null, global);
goog.exportSymbol('proto.encryption_access.EncryptionAccess.StoreEntry', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.encryption_access.EncryptionAccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.encryption_access.EncryptionAccess.repeatedFields_, null);
};
goog.inherits(proto.encryption_access.EncryptionAccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.encryption_access.EncryptionAccess.displayName = 'proto.encryption_access.EncryptionAccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.encryption_access.EncryptionAccess.StoreEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.encryption_access.EncryptionAccess.StoreEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.encryption_access.EncryptionAccess.StoreEntry.displayName = 'proto.encryption_access.EncryptionAccess.StoreEntry';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.encryption_access.EncryptionAccess.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.encryption_access.EncryptionAccess.prototype.toObject = function(opt_includeInstance) {
  return proto.encryption_access.EncryptionAccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.encryption_access.EncryptionAccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.encryption_access.EncryptionAccess.toObject = function(includeInstance, msg) {
  var f, obj = {
    defaultKey: msg.getDefaultKey_asB64(),
    storeEntriesList: jspb.Message.toObjectList(msg.getStoreEntriesList(),
    proto.encryption_access.EncryptionAccess.StoreEntry.toObject, includeInstance),
    defaultPathCipher: jspb.Message.getFieldWithDefault(msg, 3, 0),
    defaultEncryptionParameters: (f = msg.getDefaultEncryptionParameters()) && encryption_pb.EncryptionParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.encryption_access.EncryptionAccess}
 */
proto.encryption_access.EncryptionAccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.encryption_access.EncryptionAccess;
  return proto.encryption_access.EncryptionAccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.encryption_access.EncryptionAccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.encryption_access.EncryptionAccess}
 */
proto.encryption_access.EncryptionAccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDefaultKey(value);
      break;
    case 2:
      var value = new proto.encryption_access.EncryptionAccess.StoreEntry;
      reader.readMessage(value,proto.encryption_access.EncryptionAccess.StoreEntry.deserializeBinaryFromReader);
      msg.addStoreEntries(value);
      break;
    case 3:
      var value = /** @type {!proto.encryption.CipherSuite} */ (reader.readEnum());
      msg.setDefaultPathCipher(value);
      break;
    case 4:
      var value = new encryption_pb.EncryptionParameters;
      reader.readMessage(value,encryption_pb.EncryptionParameters.deserializeBinaryFromReader);
      msg.setDefaultEncryptionParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.encryption_access.EncryptionAccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.encryption_access.EncryptionAccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.encryption_access.EncryptionAccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.encryption_access.EncryptionAccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDefaultKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStoreEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.encryption_access.EncryptionAccess.StoreEntry.serializeBinaryToWriter
    );
  }
  f = message.getDefaultPathCipher();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDefaultEncryptionParameters();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      encryption_pb.EncryptionParameters.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.encryption_access.EncryptionAccess.StoreEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.encryption_access.EncryptionAccess.StoreEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.encryption_access.EncryptionAccess.StoreEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucket: msg.getBucket_asB64(),
    unencryptedPath: msg.getUnencryptedPath_asB64(),
    encryptedPath: msg.getEncryptedPath_asB64(),
    key: msg.getKey_asB64(),
    pathCipher: jspb.Message.getFieldWithDefault(msg, 5, 0),
    encryptionParameters: (f = msg.getEncryptionParameters()) && encryption_pb.EncryptionParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.encryption_access.EncryptionAccess.StoreEntry}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.encryption_access.EncryptionAccess.StoreEntry;
  return proto.encryption_access.EncryptionAccess.StoreEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.encryption_access.EncryptionAccess.StoreEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.encryption_access.EncryptionAccess.StoreEntry}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBucket(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUnencryptedPath(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedPath(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 5:
      var value = /** @type {!proto.encryption.CipherSuite} */ (reader.readEnum());
      msg.setPathCipher(value);
      break;
    case 6:
      var value = new encryption_pb.EncryptionParameters;
      reader.readMessage(value,encryption_pb.EncryptionParameters.deserializeBinaryFromReader);
      msg.setEncryptionParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.encryption_access.EncryptionAccess.StoreEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.encryption_access.EncryptionAccess.StoreEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.encryption_access.EncryptionAccess.StoreEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucket_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUnencryptedPath_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getEncryptedPath_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPathCipher();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getEncryptionParameters();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      encryption_pb.EncryptionParameters.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes bucket = 1;
 * @return {!(string|Uint8Array)}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getBucket = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bucket = 1;
 * This is a type-conversion wrapper around `getBucket()`
 * @return {string}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getBucket_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBucket()));
};


/**
 * optional bytes bucket = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBucket()`
 * @return {!Uint8Array}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getBucket_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBucket()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.encryption_access.EncryptionAccess.StoreEntry} returns this
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.setBucket = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes unencrypted_path = 2;
 * @return {!(string|Uint8Array)}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getUnencryptedPath = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes unencrypted_path = 2;
 * This is a type-conversion wrapper around `getUnencryptedPath()`
 * @return {string}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getUnencryptedPath_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUnencryptedPath()));
};


/**
 * optional bytes unencrypted_path = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnencryptedPath()`
 * @return {!Uint8Array}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getUnencryptedPath_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUnencryptedPath()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.encryption_access.EncryptionAccess.StoreEntry} returns this
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.setUnencryptedPath = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes encrypted_path = 3;
 * @return {!(string|Uint8Array)}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getEncryptedPath = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes encrypted_path = 3;
 * This is a type-conversion wrapper around `getEncryptedPath()`
 * @return {string}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getEncryptedPath_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedPath()));
};


/**
 * optional bytes encrypted_path = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedPath()`
 * @return {!Uint8Array}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getEncryptedPath_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedPath()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.encryption_access.EncryptionAccess.StoreEntry} returns this
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.setEncryptedPath = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes key = 4;
 * @return {!(string|Uint8Array)}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes key = 4;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.encryption_access.EncryptionAccess.StoreEntry} returns this
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional encryption.CipherSuite path_cipher = 5;
 * @return {!proto.encryption.CipherSuite}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getPathCipher = function() {
  return /** @type {!proto.encryption.CipherSuite} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.encryption.CipherSuite} value
 * @return {!proto.encryption_access.EncryptionAccess.StoreEntry} returns this
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.setPathCipher = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional encryption.EncryptionParameters encryption_parameters = 6;
 * @return {?proto.encryption.EncryptionParameters}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.getEncryptionParameters = function() {
  return /** @type{?proto.encryption.EncryptionParameters} */ (
    jspb.Message.getWrapperField(this, encryption_pb.EncryptionParameters, 6));
};


/**
 * @param {?proto.encryption.EncryptionParameters|undefined} value
 * @return {!proto.encryption_access.EncryptionAccess.StoreEntry} returns this
*/
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.setEncryptionParameters = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.encryption_access.EncryptionAccess.StoreEntry} returns this
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.clearEncryptionParameters = function() {
  return this.setEncryptionParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.encryption_access.EncryptionAccess.StoreEntry.prototype.hasEncryptionParameters = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes default_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.encryption_access.EncryptionAccess.prototype.getDefaultKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes default_key = 1;
 * This is a type-conversion wrapper around `getDefaultKey()`
 * @return {string}
 */
proto.encryption_access.EncryptionAccess.prototype.getDefaultKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDefaultKey()));
};


/**
 * optional bytes default_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDefaultKey()`
 * @return {!Uint8Array}
 */
proto.encryption_access.EncryptionAccess.prototype.getDefaultKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDefaultKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.encryption_access.EncryptionAccess} returns this
 */
proto.encryption_access.EncryptionAccess.prototype.setDefaultKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated StoreEntry store_entries = 2;
 * @return {!Array<!proto.encryption_access.EncryptionAccess.StoreEntry>}
 */
proto.encryption_access.EncryptionAccess.prototype.getStoreEntriesList = function() {
  return /** @type{!Array<!proto.encryption_access.EncryptionAccess.StoreEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.encryption_access.EncryptionAccess.StoreEntry, 2));
};


/**
 * @param {!Array<!proto.encryption_access.EncryptionAccess.StoreEntry>} value
 * @return {!proto.encryption_access.EncryptionAccess} returns this
*/
proto.encryption_access.EncryptionAccess.prototype.setStoreEntriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.encryption_access.EncryptionAccess.StoreEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.encryption_access.EncryptionAccess.StoreEntry}
 */
proto.encryption_access.EncryptionAccess.prototype.addStoreEntries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.encryption_access.EncryptionAccess.StoreEntry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.encryption_access.EncryptionAccess} returns this
 */
proto.encryption_access.EncryptionAccess.prototype.clearStoreEntriesList = function() {
  return this.setStoreEntriesList([]);
};


/**
 * optional encryption.CipherSuite default_path_cipher = 3;
 * @return {!proto.encryption.CipherSuite}
 */
proto.encryption_access.EncryptionAccess.prototype.getDefaultPathCipher = function() {
  return /** @type {!proto.encryption.CipherSuite} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.encryption.CipherSuite} value
 * @return {!proto.encryption_access.EncryptionAccess} returns this
 */
proto.encryption_access.EncryptionAccess.prototype.setDefaultPathCipher = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional encryption.EncryptionParameters default_encryption_parameters = 4;
 * @return {?proto.encryption.EncryptionParameters}
 */
proto.encryption_access.EncryptionAccess.prototype.getDefaultEncryptionParameters = function() {
  return /** @type{?proto.encryption.EncryptionParameters} */ (
    jspb.Message.getWrapperField(this, encryption_pb.EncryptionParameters, 4));
};


/**
 * @param {?proto.encryption.EncryptionParameters|undefined} value
 * @return {!proto.encryption_access.EncryptionAccess} returns this
*/
proto.encryption_access.EncryptionAccess.prototype.setDefaultEncryptionParameters = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.encryption_access.EncryptionAccess} returns this
 */
proto.encryption_access.EncryptionAccess.prototype.clearDefaultEncryptionParameters = function() {
  return this.setDefaultEncryptionParameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.encryption_access.EncryptionAccess.prototype.hasDefaultEncryptionParameters = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.encryption_access);
